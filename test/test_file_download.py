import unittest
import tempfile
import filecmp
from os import remove
from os.path import getsize, exists, isfile
from pathlib import Path
from mcapi import set_remote_config_url, get_remote_config_url, create_project
from mcapi import _create_file_with_upload, _download_data_to_file


remote_url = 'http://mctest.localhost/api'


class TestFileDownload(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        set_remote_config_url(remote_url)
        cls.filepath1 = 'test/test_upload_data/fractal.jpg'
        cls.base_project_name = "FileUploadTest01"
        description = "Test project generated by automated test"
        project = create_project(cls.base_project_name, description)
        directory = project.get_top_directory()
        cls.base_project_id = project.id
        cls.base_project = project
        cls.base_directory_id = directory.id
        cls.base_directory = directory

        path = Path(cls.filepath1)
        cls.file_name = path.parts[-1]
        input_path = str(path.absolute())
        cls.byte_count = getsize(input_path)
        cls.file = _create_file_with_upload(project, cls.base_directory, cls.file_name, input_path)

    def test_is_setup_correctly(self):
        self.assertEqual(get_remote_config_url(), remote_url)
        self.assertTrue(Path(self.filepath1).is_file())

        project = self.base_project
        self.assertIsNotNone(project)
        self.assertIsNotNone(project.name)
        self.assertEqual(self.base_project_name, project.name)
        self.assertIsNotNone(project.id)
        self.assertEqual(self.base_project_id, project.id)

        self.assertEqual(self.base_directory._project, self.base_project)

        self.assertIsNotNone(self.file)
        self.assertEqual(self.file.size, self.byte_count)
        self.assertEqual(self.file.name, self.file_name)

    def test_download_raw(self):
        project = self.base_project
        test_file = self.file
        download_file_path = tempfile.gettempdir() + "/" + test_file.name
        if exists(download_file_path):
            remove(download_file_path)

        filepath = _download_data_to_file(project, test_file, download_file_path)

        self.assertTrue(exists(filepath))
        self.assertTrue(isfile(filepath))
        self.assertTrue(filecmp.cmp(self.filepath1, filepath))
