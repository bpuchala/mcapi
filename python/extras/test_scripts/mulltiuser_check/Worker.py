import logging
from random import randint
from materials_commons.api import create_project, get_all_templates
from materials_commons.api import _use_remote as use_remote, _set_remote as set_remote


class Worker:
    def __init__(self, name, apikey):
        self.log = logging.getLogger(self.__class__.__name__)
        self.name = name
        self.apikey = apikey
        self.log.info("init: name = {}".format(self.name))

    def run(self):
        # noinspection PyBroadException
        try:
            self.log.info("Starting worker {}".format(self.name))
            self._set_up_remote_for(self.apikey)
            project_name = self.fake_name("TestApikeyProject-")
            description = "Test project generated by automated test"
            project = create_project(project_name, description)
            experiment_name = self.fake_name("TestApikeyExperiment-")
            description = "Test experiment generated by automated test"
            experiment = project.create_experiment(experiment_name, description)

            template_table = self.make_template_table(get_all_templates())

            create_template = self.find_template_id_from_match(template_table, "Create Sample")
            create_process = experiment.create_process_from_template(create_template)

            ht_template = self.find_template_id_from_match(template_table, "Heat Treatment")
            ht_process = experiment.create_process_from_template(ht_template)

            process_list = project.get_all_processes()
            process_templates = [process.template_id for process in process_list]

            self.log.info("Ending worker {}".format(self.name))
        except BaseException:
            self.log.exception("Exception in worker {}".format(self.name))

    @staticmethod
    def fake_name(prefix):
        number = "%05d" % randint(0, 99999)
        return prefix + number

    @staticmethod
    def _set_up_remote_for(key):
        remote = use_remote()
        remote.config.mcapikey = key
        remote.config.params = {'apikey': key}
        set_remote(remote)

    @staticmethod
    def make_template_table(templates):
        ret = {}
        for t in templates:
            ret[t.id] = t
        return ret

    @staticmethod
    def find_template_id_from_match(template_table, match):
        found_id = None
        for key in template_table:
            if match in key:
                found_id = key
        return found_id
