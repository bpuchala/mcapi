import unittest
from random import randint
from materials_commons.api import api, Template


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestProcessPropMeasRaw(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        cls.project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        raw_data = api.create_project(cls.project_name, description, apikey=cls.apikey)
        cls.project_id = raw_data['id']
        experiment_name = fake_name("TestExperiment-")
        experiment_description = "Test experiment generated by automated test"
        experiment_raw = api.create_experiment(
            cls.project_id, experiment_name, experiment_description, apikey=cls.apikey)
        cls.experiment_id = experiment_raw['id']
        cls.template_id = Template.create
        process_record_raw = api.create_process_from_template(
            cls.project_id, cls.experiment_id, cls.template_id, apikey=cls.apikey)
        cls.process_id = process_record_raw['id']
        cls.sample_name = "TestSample1"
        results = api.create_samples_in_project(
            cls.project_id, cls.process_id, [cls.sample_name], apikey=cls.apikey)
        sample_list_raw = results['samples']
        sample_raw = sample_list_raw[0]
        cls.sample_id = sample_raw['id']
        api.add_samples_to_experiment(
            cls.project_id, cls.experiment_id, [sample_raw['id']], apikey=cls.apikey)

    def test_set_measurement_for_process_samples_raw(self):
        measurement_property = {
            "name": "Composition",
        "attribute": "composition"
        }

        self.assertTrue(False)
# api.set_measurement_for_process_samples(project_id, experiment_id, process_id,
#                                        samples, measurement_property, measurements, apikey=self.apikey)
# api.update_process_setup_properties(project_id, experiment_id, process, properties, apikey=self.apikey)
# api.update_additional_properties_in_process(project_id, experiment_id, process_id, properties, apikey=self.apikey)

# >>> measurement_data = {
# >>>     "name": "Composition",
# >>>     "attribute": "composition",
# >>>     "otype": "composition",
# >>>     "unit": "at%",
# >>>     "value": [
# >>>         {"element": "Al", "value": 94},
# >>>         {"element": "Ca", "value": 1},
# >>>         {"element": "Zr", "value": 5}],
# >>>     "is_best_measure": True
# >>> }
# >>> measurement = my_process.create_measurement(data=measurement_data)
# >>>
# >>> measurement_property = {
# >>>     "name": "Composition",
# >>>     "attribute": "composition"
# >>> }
# >>> my_process = my_process.set_measurements_for_process_samples(measurement_property, [measurement])
#
# self._set_measurement_for_process_samples(
#     self.make_list_of_samples_for_measurement(self.get_all_samples()),
#     measurement_property,
#     measurements
#
# # Process - internal (private method)
# def _set_measurement_for_process_samples(self, samples_with_property_set_ids, measurement_property, measurements):
#     project_id = self.project.id
#     experiment_id = self.experiment.id
#     process_id = self.id
#     samples_parameter = []
#     for table in samples_with_property_set_ids:
#         samples_parameter.append({
#             'id': table['sample'].id,
#             'property_set_id': table['property_set_id']
#         })
#     measurement_parameter = []
#     for measurement in measurements:
#         measurement_parameter.append({
#             'name': measurement.name,
#             'attribute': measurement.attribute,
#             'otype': measurement.otype,
#             'value': measurement.value,
#             'unit': measurement.unit,
#             'is_best_measure': measurement.is_best_measure
#         })
#     success_flag = api.set_measurement_for_process_samples(
#         project_id, experiment_id, process_id,
#         samples_parameter, measurement_property, measurement_parameter)
#     if not success_flag:
#         print("mcapi.mc._set_measurement_for_process_samples - unexpectedly failed")
#         return None
#     return self.experiment.get_process_by_id(process_id)

