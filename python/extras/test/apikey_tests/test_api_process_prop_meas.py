import unittest
import pytest
from random import randint

from materials_commons.api import api, Template


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestProcessPropMeasRaw(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        cls.project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        raw_data = api.create_project(cls.project_name, description, apikey=cls.apikey)
        cls.project_id = raw_data['id']
        experiment_name = fake_name("TestExperiment-")
        experiment_description = "Test experiment generated by automated test"
        experiment_raw = api.create_experiment(
            cls.project_id, experiment_name, experiment_description, apikey=cls.apikey)
        cls.experiment_id = experiment_raw['id']
        cls.template_id = Template.create
        process_record_raw = api.create_process_from_template(
            cls.project_id, cls.experiment_id, cls.template_id, apikey=cls.apikey)
        cls.create_process_id = process_record_raw['id']
        cls.sample_name = "TestSample1"
        results = api.create_samples_in_project(
            cls.project_id, cls.create_process_id, [cls.sample_name], apikey=cls.apikey)
        sample_list_raw = results['samples']
        sample_raw = sample_list_raw[0]
        cls.sample_id = sample_raw['id']
        api.add_samples_to_experiment(
            cls.project_id, cls.experiment_id, [sample_raw['id']], apikey=cls.apikey)
        results = api.get_project_samples(cls.project_id, apikey=cls.apikey)
        sample_list = results[0]['versions']
        cls.pair_list = [{'sample_id': s['sample_id'], 'property_set_id': s['property_set_id']} for s in sample_list]
        api.add_samples_to_process(
            cls.project_id, cls.experiment_id, cls.create_process_id,
            cls.template_id, cls.pair_list, apikey=cls.apikey)

    @pytest.mark.skip("set aside")
    def test_set_measurement_for_process_samples_raw(self):

        measurement_property = {
            "name": "Composition",
            "attribute": "composition"
        }

        measurement_data = {
            "name": "Composition",
            "attribute": "composition",
            "otype": "composition",
            "unit": "at%",
            "value": [
                {"element": "Al", "value": 94},
                {"element": "Ca", "value": 1},
                {"element": "Zr", "value": 5}],
            "is_best_measure": True
        }

        measurements = [measurement_data]

        samples_data = [
            {'id': s['sample_id'], 'property_set_id': s['property_set_id']}
            for s in self.pair_list]

        flag = api.set_measurement_for_process_samples(
            self.project_id, self.experiment_id, self.create_process_id, samples_data,
            measurement_property, measurements, apikey=self.apikey)

        self.assertTrue(flag)

        process_record_raw = api.get_process_by_id(self.project_id, self.create_process_id, apikey=self.apikey)
        self.assertEqual(self.user, process_record_raw['owner'])
        self.assertEqual(1, len(process_record_raw['measurements']))
        measurement = process_record_raw['measurements'][0]
        self.assertEqual('composition', measurement['attribute'])
        self.assertEqual(self.create_process_id, measurement['process_id'])

    def test_update_process_setup_properties_raw(self):
        process = None
        properties = None
        results = api.update_process_setup_properties(
            self.project_id, self.experiment_id, process, properties, apikey=self.apikey)


# api.update_additional_properties_in_process(project_id, experiment_id, process_id, properties, apikey=self.apikey)
