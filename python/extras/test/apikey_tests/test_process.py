import unittest
import pytest
from random import randint
from materials_commons.api import create_project, Template


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestProcess(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        cls.another_user = "test@test.mc"
        cls.another_apikey = "totally-bogus"
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(project_name, description, apikey=cls.apikey)
        experiment_name = fake_name("TestApikeyExperiment-")
        description = "Test experiment generated by automated test"
        cls.experiment = cls.project.create_experiment(experiment_name, description)
        cls.process = cls.experiment.create_process_from_template(Template.create)

    def test_process_rename(self):
        process = self.experiment.create_process_from_template(Template.create)
        new_name = 'new_name'
        update = process.rename(new_name)
        self.assertEqual(new_name, update.name)
        self.assertEqual(self.user, update.owner)

    def test_process_delete(self):
        process = self.experiment.create_process_from_template(Template.create)
        self.assertEqual(self.user, process.owner)
        process_list = self.experiment.get_all_processes()
        found = None
        for probe in process_list:
            if probe.id == process.id:
                found = probe
        self.assertIsNotNone(found)
        process.delete()
        self.assertEqual(self.user, process.owner)
        process_list = self.experiment.get_all_processes()
        found = None
        for probe in process_list:
            if probe.id == process.id:
                found = probe
        self.assertIsNone(found)

    def test_process_set_notes(self):
        process_notes_value = "An experimental process with notes"
        process_notes_value_expected = "<p>" + process_notes_value + "</p>"
        process = self.process.set_notes(process_notes_value)
        self.assertEqual(process.description, process_notes_value_expected)
        self.assertEqual(process.notes, process_notes_value_expected)

    def test_process_add_to_notes(self):
        process_notes_value = "An experimental process with notes"
        process_notes_value_expected = "<p>" + process_notes_value + "</p>"
        process = self.process.set_notes(process_notes_value)
        self.assertEqual(process.description, process_notes_value_expected)
        self.assertEqual(process.notes, process_notes_value_expected)
        process = process.add_to_notes(process_notes_value)
        process_notes_value_expected = process_notes_value_expected + "\n" + process_notes_value_expected
        self.assertEqual(process.notes, process_notes_value_expected)


# # def create_samples(self, sample_names):
# # def get_sample_by_id(self, process_id):
# # def get_all_samples(self):
# # def add_input_samples_to_process(self, samples):
# # def get_all_files(self):
# # def add_files(self, files_list):
# # def get_setup_properties_as_dictionary(self):
# # def is_known_setup_property(self, attribute):
# # def set_value_of_setup_property(self, name, value):
# # def set_unit_of_setup_property(self, name, unit):
# # def update_setup_properties(self, name_list):
# # def update_additional_setup_properties(self, entry_list):
# # def make_list_of_samples_for_measurement(self, samples):
# # def create_measurement(self, data):
# # def set_measurements_for_process_samples(self, measurement_property, measurements):
# # def set_measurement(self, attribute, measurement_data, name=None):
# # def add_integer_measurement(self, attrname, value, name=None):
# # def add_number_measurement(self, attrname, value, name=None):
# # def add_boolean_measurement(self, attrname, value, name=None):
# # def add_string_measurement(self, attrname, value, name=None):
# # def add_file_measurement(self, attrname, file, name=None):
# # def add_sample_measurement(self, attrname, sample, name=None):
# # def add_list_measurement(self, attrname, value, value_type, name=None):
# # def add_numpy_matrix_measurement(self, attrname, value, name=None):
# # def add_selection_measurement(self, attrname, value, name=None):
# # def add_vector_measurement(self, attrname, value, name=None):
# # def decorate_with_output_samples(self):
# # def decorate_with_input_samples(self):


# from Project
# def get_all_processes(self):
# def get_process_by_id(self, process_id):
# def get_all_samples(self):
# def fetch_sample_by_id(self, sample_id):
# def get_sample_by_id(self, sample_id):

# from Experiment
# def get_sample_by_id(self, sample_id):
# def get_all_samples(self):
# def decorate_with_samples(self):
