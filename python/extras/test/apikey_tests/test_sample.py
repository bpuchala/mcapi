import unittest
import pytest
from random import randint
from materials_commons.api import create_project, Experiment


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


# Moved from Project
# def get_all_samples(self):
# def fetch_sample_by_id(self, sample_id):
# def get_sample_by_id(self, sample_id):

class TestSample(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        project_name = fake_name("TestApikeyProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(project_name, description, apikey=cls.apikey)

    @pytest.mark.skip("TestSample  - check this")
    def test_any(self):
        pass

# Moved from Project
# def get_all_samples(self):
# def fetch_sample_by_id(self, sample_id):
# def get_sample_by_id(self, sample_id):


class TestSamplesForProject(unittest.TestCase):
    @pytest.mark.skip("TestSample TestSamplesForProject")
    def test_any(self):
        pass
# def get_all_samples(self):
# def fetch_sample_by_id(self, sample_id):
# def get_sample_by_id(self, sample_id):


# Moved from Experiment
# def get_sample_by_id(self, sample_id):
# def get_all_samples(self):
# def decorate_with_samples(self):

class TestSamplesForExperiment(unittest.TestCase):
    @pytest.mark.skip("TestSample TestSamplesForExperiment")
    def test_any(self):
        pass
# from Experiment
# def get_sample_by_id(self, sample_id):
# def get_all_samples(self):
# def decorate_with_samples(self):
