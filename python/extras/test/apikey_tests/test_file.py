import unittest
import pytest
import tempfile
import filecmp
from os import remove
from os.path import exists, isfile
from random import randint
from materials_commons.api import create_project
from .apikey_helper_utils import _setup_test_filepath1, _get_local_test_dir_path, _get_file_size
from .apikey_helper_utils import _get_filename_from_path, _get_absolute_path_from_path
from .apikey_helper_utils import FileTestException


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestFileBasic(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.user = "another@test.mc"
        cls.apikey = "another-bogus-account"
        project_name = fake_name("TestApikeyProject-")
        print('')
        print(project_name)
        description = "Test project generated by automated test"
        cls.project = create_project(project_name, description, apikey=cls.apikey)
        cls.top_directory = cls.project.get_top_directory()

        try:
            cls.file_path = _setup_test_filepath1()
            cls.local_dir_path_for_tests = _get_local_test_dir_path()
            cls.project.local_path = cls.local_dir_path_for_tests
        except FileTestException:
            pytest.fail("Unexpected, exception", pytrace=True)

        filepath1 = _setup_test_filepath1()
        cls.file_name1 = "testFile1.jpg"
        input_path = _get_absolute_path_from_path(filepath1)
        cls.test_file1 = cls.project.add_file_using_directory(cls.top_directory, cls.file_name1, input_path)
        cls.directory = cls.project.add_directory("/A")

    def test_file_rename(self):
        old_name = self.file_name1
        self.assertEqual(old_name, self.test_file1.name)
        new_name = "Rename" + old_name
        file = self.test_file1.rename(new_name)
        self.assertEqual(old_name, self.test_file1.name)

    def move(self, new_directory):
        pass

    def delete(self):
        pass

    def get_parent(self):
        pass

    def local_path(self):
        pass


# From Project - Move to File
# def add_file_using_directory(self, directory, file_name, local_path, verbose=False, limit=50):
# def add_file_by_local_path(self, local_path, verbose=False, limit=50):
# def get_by_local_path(self, local_path):
# def file_exists_by_local_path(self, local_path, checksum=False):
# def add_directory_tree_by_local_path(self, local_path, verbose=False, limit=50):

# # def get_all_files(self):
# # def add_files(self, files_list):

# From Directory - moved to File
# def add_file(self, file_name, local_input_path, verbose=False, limit=50):
# def add_directory_tree(dir_name, input_dir_path, verbose=False, limit=50):
