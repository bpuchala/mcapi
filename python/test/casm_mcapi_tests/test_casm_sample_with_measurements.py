import unittest
from random import randint
from mcapi import set_remote_config_url
from mcapi import create_project, Template
from casm_mcapi import _add_string_measurement


url = 'http://mctest.localhost/api'


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix+number

class TestAddChoiceMeasurements(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        set_remote_config_url(url)
        cls.project_name = fake_name("TestProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(cls.project_name, description)
        cls.project_id = cls.project.id
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        cls.experiment = cls.project.create_experiment(name, description)
        cls.experiment_id = cls.experiment.id
        cls.process = cls.experiment.create_process_from_template(
            Template.primitive_crystal_structure)
        cls.sample_name = "pcs-sample-1"
        cls.sample = cls.process.create_samples(sample_names=[cls.sample_name])[0]
        cls.process = cls.process.add_samples_to_process([cls.sample])


    def test_is_setup_correctly(self):
        self.assertIsNotNone(self.project)
        self.assertIsNotNone(self.project.name)
        self.assertEqual(self.project_name, self.project.name)
        self.assertIsNotNone(self.project.id)
        self.assertEqual(self.project_id, self.project.id)
        self.assertIsNotNone(self.experiment)
        self.assertIsNotNone(self.experiment.id)
        self.assertEqual(self.experiment_id, self.experiment.id)
        self.assertIsNotNone(self.process)
        self.assertIsNotNone(self.process.id)
        self.assertIsNotNone(self.process.process_type)
        self.assertEqual(self.process.process_type, 'create')
        self.assertTrue(self.process.does_transform)

        sample = self.sample
        samples = self.process.output_samples
        self.assertIsNotNone(sample)
        self.assertIsNotNone(sample.name)
        self.assertIsNotNone(sample.property_set_id)
        self.assertEqual(sample.name, self.sample_name)
        self.assertEqual(sample.name, samples[0].name)

    def test_measurement_attribute_lattice_system_direct(self):
        process = self.create_prim_sample(expt, casm_proj, "Test Sample")


    def make_properties_dictionary(self,properties):
        ret = {}
        for property in properties:
            name = property.name
            ret[name] = property
        return ret

    def create_prim_sample(expt, casm_proj, sample_name=None):
        """
        Create a CASM Primitive Crystal Structure Sample

        Assumes expt.project.path exists and adds files relative to that path.

        Arguments:

            expt: mcapi.Experiment object

            casm_proj: casm.project.Project object

            sample_name: str
              Name for sample, default is: casm_proj.name + ".prim"

        Returns:

            create_sample_process: mcapi.Process instance
              The Process that created the sample
        """

        ## Process that will create samples
        create_sample_process = expt.create_process_from_template("global_Primitive Crystal Structure")

        ## Create sample
        if sample_name is None:
            sample_name = casm_proj.name + ".prim"
        create_sample_process.create_samples([sample_name])

        # Sample attributes (how to check names?):
        # "name"
        _add_string_measurement(create_sample_process, 'name', casm_proj.name)

        prim = casm_proj.prim

        # "lattice"
        #     "matrix"
        #     "parameters" (a, b, c, alpha, beta, gamma)
        #     "system" ("triclinic", "monoclinic", "orthorhombic", "tetragonal",
        #               "hexagonal", "rhombohedral", "cubic")
        #     "symmetry" (Schoenflies symbol)
        _add_numpy_matrix_measurement(
            create_sample_process,
            'lattice_matrix',
            prim.lattice_matrix)

        _add_vector_measurement(
            create_sample_process,
            'lattice_parameters',
            prim.lattice_parameters)

        _add_string_measurement(
            create_sample_process,
            'lattice_point_group_schonflies',
            prim.lattice_symmetry_s)

        _add_string_measurement(
            create_sample_process,
            'lattice_point_group_hermann_mauguin',
            prim.lattice_symmetry_hm)

        _add_string_measurement(
            create_sample_process,
            'lattice_system',
            prim.lattice_system)

        # "space_group"
        #      "point_group_schonflies"
        #      "point_group_hermann_mauguin"
        #      "number"
        #      "crystal_family" ("triclinic", "monoclinic", "orthorhombic",
        #                        "tetragonal", "hexagonal", "cubic")
        #      "crystal_system" ("triclinic", "monoclinic", "orthorhombic",
        #                        "tetragonal", "hexagonal", "trigonal", "cubic")
        _add_string_measurement(
            create_sample_process,
            'crystal_point_group_schonflies',
            prim.crystal_symmetry_s)

        _add_string_measurement(
            create_sample_process,
            'crystal_point_group_hermann_mauguin',
            prim.crystal_symmetry_hm)

        _add_string_measurement(
            create_sample_process,
            'crystal_family',
            prim.crystal_family)

        _add_string_measurement(
            create_sample_process,
            'crystal_system',
            prim.crystal_system)

        # right now, this is a string giving a range of possible values based on the
        #   crystal point group
        _add_string_measurement(
            create_sample_process,
            'space_group_number',
            prim.space_group_number)

        # "casm_prim_file"
        mcfile = _add_file(expt.project, casm_proj.dir.prim())
        _add_file_measurement(create_sample_process, 'casm_prism_file', mcfile)

        # "elements" - currently only elemental components are allowed
        _add_list_measurement(
            create_sample_process,
            'elements',
            prim.elements,
            'string')

        # "n_elements"
        _add_integer_measurement(
            create_sample_process,
            'n_elements',
            len(prim.elements))

        # "components" - currently only elemental components are allowed
        _add_list_measurement(
            create_sample_process,
            'components',
            prim.components,
            'string')

        # "n_components"
        _add_integer_measurement(
            create_sample_process,
            'n_components',
            len(prim.components))

        # "n_independent_compositions"
        _add_integer_measurement(
            create_sample_process,
            'n_independent_compositions',
            prim.n_independent_compositions)

        # "degrees_of_freedom" ("occupation", "displacement", "strain")
        _add_string_measurement(
            create_sample_process,
            'degrees_of_freedom',
            prim.degrees_of_freedom)

        create_sample_process = mcapi.get_process_from_id(
            expt.project,
            expt,
            create_sample_process.id)

        return create_sample_process


