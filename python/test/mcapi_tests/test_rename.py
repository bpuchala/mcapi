import unittest
from random import randint
from mcapi import set_remote_config_url, get_remote_config_url
from mcapi import create_project

url = 'http://mctest.localhost/api'


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix+number


class TestRename(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        set_remote_config_url(url)
        cls.project_name = fake_name("TestRenameProject-")
        description = "Test project generated by automated test"
        project = create_project(cls.project_name, description)
        cls.project_id = project.id
        cls.project = project
        cls.top_directory = project.get_top_directory()
        cls.test_dir_path_a = "/TestForRename/A"
        cls.test_a_newname = "NewNameA"
        cls.directory_a = project.add_directory(cls.test_dir_path_a)
        cls.test_dir_path_b = "/TestForRename/Another/B"
        cls.test_b_newname = "NewNameA"
        cls.directory_b = project.add_directory(cls.test_dir_path_b)

        directory = cls.top_directory
        filepath =
        path = Path(self.filepath1)
        file_name = path.parts[-1]
        input_path = str(path.absolute())
        byte_count = getsize(input_path)
        test_file = _create_file_with_upload(project, directory, file_name, input_path)
        self.assertIsNotNone(test_file)
        self.assertEqual(test_file.size, byte_count)


    def test_is_setup_correctly(self):
        self.assertEqual(get_remote_config_url(), url)
        self.assertIsNotNone(self.project)
        self.assertIsNotNone(self.project.name)
        self.assertEqual(self.project_name, self.project.name)
        self.assertIsNotNone(self.project.id)
        self.assertEqual(self.project_id, self.project.id)
        self.assertEqual(self.top_directory.name, self.project.name)
        self.assertEqual(self.directory_a.name, self.project.name + self.test_dir_path_a)
        self.assertEqual(self.directory_b.name, self.project.name + self.test_dir_path_b)

        directory_list = self.project.get_directory_list(self.test_dir_path_a)
        self.assertIsNotNone(directory_list)
        print ''
        print len(directory_list)
        print directory_list[0].name
        print directory_list[1].name