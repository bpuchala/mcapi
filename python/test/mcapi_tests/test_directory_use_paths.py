import unittest
from random import randint
from mcapi import set_remote_config_url, get_remote_config_url
from mcapi import create_project

url = 'http://mctest.localhost/api'


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix+number


class TestDirectory(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        set_remote_config_url(url)
        cls.base_project_name = fake_name("TestDirectoryProject-")
        description = "Test project generated by automated test"
        project = create_project(cls.base_project_name, description)
        cls.base_project_id = project.id
        cls.base_project = project
        cls.test_dir_path = "/TestDir1/TestDir2/TestDir3"
        cls.directory_list = cls.base_project.create_directory_list(cls.test_dir_path)

    def test_is_setup_correctly(self):
        self.assertEqual(get_remote_config_url(), url)
        self.assertIsNotNone(self.base_project)
        self.assertIsNotNone(self.base_project.name)
        self.assertEqual(self.base_project_name, self.base_project.name)
        self.assertIsNotNone(self.base_project.id)
        self.assertEqual(self.base_project_id, self.base_project.id)
        self.assertIsNotNone(self.directory_list)
        last_directory = self.directory_list[-1]
        path1 = "/" + last_directory.name.split("/", 1)[1]
        path2 = self.test_dir_path
        if path2.endswith("/"):
            path2 = path2[:-1]
        self.assertEqual(path1, path2)

    def test_get_dirs_from_project(self):
        directory_list = self.base_project.get_all_directories()
        self.assertIsNotNone(directory_list)
        last_directory = directory_list[-1]
        path1 = "/" + last_directory.name.split("/", 1)[1]
        path2 = self.test_dir_path
        if path2.endswith("/"):
            path2 = path2[:-1]
        self.assertEqual(path1, path2)
