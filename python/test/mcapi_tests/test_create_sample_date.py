import unittest
from random import randint
from mcapi import api
from mcapi import set_remote_config_url, get_remote_config_url
from mcapi import create_project
from mcapi import Template

url = 'http://mctest.localhost/api'


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix+number


class TestCreateSampleDate(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        set_remote_config_url(url)
        cls.project_name = fake_name("TestProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(cls.project_name, description)
        cls.project_id = cls.project.id
        cls.experiment_name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        cls.experiment = cls.project.create_experiment(cls.experiment_name, description)
        cls.experiment_id = cls.experiment.id
        cls.process = cls.experiment.create_process_from_template(Template.create)
        cls.process_id = cls.process.id

    def test_is_setup_correctly(self):
        self.assertIsNotNone(self.project)
        self.assertIsNotNone(self.project.name)
        self.assertEqual(self.project_name, self.project.name)
        self.assertIsNotNone(self.project.id)
        self.assertEqual(self.project_id, self.project.id)
        self.assertIsNotNone(self.experiment)
        self.assertIsNotNone(self.experiment.id)
        self.assertEqual(self.experiment_id, self.experiment.id)
        self.assertIsNotNone(self.process)
        self.assertIsNotNone(self.process_id)
        self.assertIsNotNone(self.process.process_type)
        self.assertEqual(self.process.process_type, 'create')
        self.assertTrue(self.process.does_transform)

    def test_set_date_from_raw_data(self):
        payload = {
            "template_id":"global_Create Samples",
            "properties":[
                {"attribute":"manufacturing_date",
                "choices":[],
                "description":"",
                "name":"Manufacturing Date",
                "otype":"date",
                "required":False,
                "unit":"",
                "units":[],
                "value":1485977519347,
                "id":"01c34168-b31c-45c8-89aa-4451500f8952",
                "setup_id":"0bdf6601-6c81-4dea-9f65-9de3a66ac044",
                "setup_attribute":"instrument"}]
        }

        api_url = "projects/" + self.project_id + \
                  "/experiments/" + self.experiment_id + \
                  "/processes/" + self.process_id

        results = api.put(api.use_remote().make_url_v2(api_url), payload)