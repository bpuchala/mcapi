import unittest
from random import randint
from mcapi import create_project, get_all_templates
from mcapi import Template
# for test-only dataset - normally datasets are not created through API!
from mcapi import __api as api

def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix+number


class TestProcessDelete(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.project_name = fake_name("TestProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(cls.project_name, description)
        cls.project_id = cls.project.id
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        cls.experiment = cls.project.create_experiment(name, description)
        cls.experiment_id = cls.experiment.id

    def test_is_setup_correctly(self):
        self.assertIsNotNone(self.project)
        self.assertIsNotNone(self.project.name)
        self.assertEqual(self.project_name, self.project.name)
        self.assertIsNotNone(self.project.id)
        self.assertEqual(self.project_id, self.project.id)
        self.assertIsNotNone(self.experiment)
        self.assertIsNotNone(self.experiment.id)
        self.assertEqual(self.experiment_id, self.experiment.id)

    def test_delete_leaf_process(self):
        create_sample_process = self.experiment.create_process_from_template(Template.create)
        sample_name = 'Test Sample 1'
        samples = create_sample_process.create_samples(sample_names=[sample_name])
        sample = samples[0]
        processes = self.experiment.get_all_processes()
        l = len(processes)
        template_table = self.make_template_table()

        template_id = self.template_id_with(template_table, 'Etching')
        non_leaf_process = self.experiment.create_process_from_template(template_id)
        non_leaf_process.add_input_samples_to_process([sample])
        non_leaf_process.decorate_with_output_samples()
        sample = non_leaf_process.output_samples[0]
        self.assertIsNotNone(non_leaf_process)
        self.assertIsNotNone(non_leaf_process.id)
        self.assertIsNotNone(non_leaf_process.process_type)
        self.assertEqual(non_leaf_process.process_type, 'transform')
        self.assertTrue(non_leaf_process.does_transform)

        template_id = self.template_id_with(template_table, 'SEM')
        leaf_process = self.experiment.create_process_from_template(template_id)
        leaf_process.add_input_samples_to_process([sample])
        self.assertIsNotNone(leaf_process)
        self.assertIsNotNone(leaf_process.id)
        self.assertIsNotNone(leaf_process.process_type)
        self.assertEqual(leaf_process.process_type, 'measurement')
        self.assertFalse(leaf_process.does_transform)

        l = len(self.experiment.get_all_processes())

        results = leaf_process.delete()

        self.assertIsNotNone(results)
        self.assertEqual(leaf_process.id,results['id'])

        self.assertEqual(len(self.experiment.get_all_processes()),l-1)

    def test_cannot_delete_non_leaf_node(self):
        create_sample_process = self.experiment.create_process_from_template(Template.create)
        sample_name = 'Test Sample 2'
        samples = create_sample_process.create_samples(sample_names=[sample_name])
        sample = samples[0]
        template_table = self.make_template_table()

        template_id = self.template_id_with(template_table, 'Etching')
        non_leaf_process = self.experiment.create_process_from_template(template_id)
        non_leaf_process.add_input_samples_to_process([sample])
        non_leaf_process.decorate_with_output_samples()
        sample = non_leaf_process.output_samples[0]
        self.assertIsNotNone(non_leaf_process)
        self.assertIsNotNone(non_leaf_process.id)
        self.assertIsNotNone(non_leaf_process.process_type)
        self.assertEqual(non_leaf_process.process_type, 'transform')
        self.assertTrue(non_leaf_process.does_transform)

        template_id = self.template_id_with(template_table, 'SEM')
        leaf_process = self.experiment.create_process_from_template(template_id)
        leaf_process.add_input_samples_to_process([sample])
        self.assertIsNotNone(leaf_process)
        self.assertIsNotNone(leaf_process.id)
        self.assertIsNotNone(leaf_process.process_type)
        self.assertEqual(leaf_process.process_type, 'measurement')
        self.assertFalse(leaf_process.does_transform)

        l = len(self.experiment.get_all_processes())

        results = non_leaf_process.delete()
        self.assertIsNone(results)

        self.assertEqual(len(self.experiment.get_all_processes()),l)

    def test_can_delete_noncreate_process_with_output_samples(self):
        create_sample_process = self.experiment.create_process_from_template(Template.create)
        sample_name = 'Test Sample 3'
        samples = create_sample_process.create_samples(sample_names=[sample_name])
        sample = samples[0]
        template_table = self.make_template_table()

        template_id = self.template_id_with(template_table, 'Etching')
        non_leaf_process = self.experiment.create_process_from_template(template_id)
        non_leaf_process.add_input_samples_to_process([sample])
        non_leaf_process.decorate_with_output_samples()
        sample = non_leaf_process.output_samples[0]
        self.assertIsNotNone(non_leaf_process)
        self.assertIsNotNone(non_leaf_process.id)
        self.assertIsNotNone(non_leaf_process.process_type)
        self.assertEqual(non_leaf_process.process_type, 'transform')
        self.assertTrue(non_leaf_process.does_transform)

        template_id = self.template_id_with(template_table, 'SEM')
        leaf_process = self.experiment.create_process_from_template(template_id)
        leaf_process.add_input_samples_to_process([sample])
        self.assertIsNotNone(leaf_process)
        self.assertIsNotNone(leaf_process.id)
        self.assertIsNotNone(leaf_process.process_type)
        self.assertEqual(leaf_process.process_type, 'measurement')
        self.assertFalse(leaf_process.does_transform)

        l = len(self.experiment.get_all_processes())

        results = leaf_process.delete()
        self.assertIsNotNone(results)
        self.assertEqual(leaf_process.id,results['id'])

        results = non_leaf_process.delete()
        self.assertIsNotNone(results)
        self.assertEqual(non_leaf_process.id,results['id'])

        self.assertEqual(len(self.experiment.get_all_processes()),l-2)

    def test_cannot_delete_create_process_with_output_samples(self):
        create_sample_process = self.experiment.create_process_from_template(Template.create)
        sample_name = 'Test Sample 4'
        samples = create_sample_process.create_samples(sample_names=[sample_name])
        sample = samples[0]
        template_table = self.make_template_table()

        template_id = self.template_id_with(template_table, 'Etching')
        non_leaf_process = self.experiment.create_process_from_template(template_id)
        non_leaf_process.add_input_samples_to_process([sample])
        non_leaf_process.decorate_with_output_samples()
        sample = non_leaf_process.output_samples[0]
        self.assertIsNotNone(non_leaf_process)
        self.assertIsNotNone(non_leaf_process.id)
        self.assertIsNotNone(non_leaf_process.process_type)
        self.assertEqual(non_leaf_process.process_type, 'transform')
        self.assertTrue(non_leaf_process.does_transform)

        template_id = self.template_id_with(template_table, 'SEM')
        leaf_process = self.experiment.create_process_from_template(template_id)
        leaf_process.add_input_samples_to_process([sample])
        self.assertIsNotNone(leaf_process)
        self.assertIsNotNone(leaf_process.id)
        self.assertIsNotNone(leaf_process.process_type)
        self.assertEqual(leaf_process.process_type, 'measurement')
        self.assertFalse(leaf_process.does_transform)

        l = len(self.experiment.get_all_processes())

        results = leaf_process.delete()
        self.assertIsNotNone(results)
        self.assertEqual(leaf_process.id,results['id'])

        results = non_leaf_process.delete()
        self.assertIsNotNone(results)
        self.assertEqual(non_leaf_process.id,results['id'])

        results = create_sample_process.delete()
        self.assertIsNone(results)

        self.assertEqual(len(self.experiment.get_all_processes()),l-2)

    def test_cannot_delete_process_in_dataset(self):
        create_sample_process = self.experiment.create_process_from_template(Template.create)
        sample_name = 'Test Sample 5'
        samples = create_sample_process.create_samples(sample_names=[sample_name])
        sample = samples[0]
        template_table = self.make_template_table()

        template_id = self.template_id_with(template_table, 'Etching')
        non_leaf_process = self.experiment.create_process_from_template(template_id)
        non_leaf_process.add_input_samples_to_process([sample])
        non_leaf_process.decorate_with_output_samples()
        sample = non_leaf_process.output_samples[0]
        self.assertIsNotNone(non_leaf_process)
        self.assertIsNotNone(non_leaf_process.id)
        self.assertIsNotNone(non_leaf_process.process_type)
        self.assertEqual(non_leaf_process.process_type, 'transform')
        self.assertTrue(non_leaf_process.does_transform)

        template_id = self.template_id_with(template_table, 'SEM')
        leaf_process = self.experiment.create_process_from_template(template_id)
        leaf_process.add_input_samples_to_process([sample])
        self.assertIsNotNone(leaf_process)
        self.assertIsNotNone(leaf_process.id)
        self.assertIsNotNone(leaf_process.process_type)
        self.assertEqual(leaf_process.process_type, 'measurement')
        self.assertFalse(leaf_process.does_transform)

        dataset = self._addDataset( "test dataset", "a dataset for texting")
        dataset_id = dataset['id']
        process_id = leaf_process.id;
        self._addProcessToDataset(dataset_id,process_id)

        l = len(self.experiment.get_all_processes())

        results = leaf_process.delete()
        self.assertIsNone(results)

        self.assertEqual(len(self.experiment.get_all_processes()),l)

    def make_template_table(self):
        template_list = get_all_templates()
        table = {}
        for template in template_list:
            table[template.id] = template
        return table

    def template_id_with(self, table, match):
        found_id = None
        for key in table:
            if match in key:
                found_id = key
        return found_id

    def _addDataset(self, title, description):
        # for testing only. Normally python API does not support adding a dataset; use UI
        project_id = self.project.id
        experiment_id = self.experiment.id
        results = api.create_dataset(project_id, experiment_id, title, description)
        return results

    def _addProcessToDataset(self,dataset_id,process_id):
        project_id = self.project.id
        experiment_id = self.experiment.id
        results = api.add_process_to_dataset(project_id, experiment_id, dataset_id, process_id)
        return results
