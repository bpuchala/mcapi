import unittest
from random import randint
from mcapi import create_project, get_all_templates
from mcapi import Template


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix+number


class TestProcess(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.project_name = fake_name("TestProject-")
        description = "Test project generated by automated test"
        cls.project = create_project(cls.project_name, description)
        cls.project_id = cls.project.id
        name = fake_name("TestExperiment-")
        description = "Test experiment generated by automated test"
        cls.experiment = cls.project.create_experiment(name, description)
        cls.experiment_id = cls.experiment.id
        cls.create_sample_process = cls.experiment.create_process_from_template(Template.create)
        sample_name = 'Test Sample 1'
        samples = cls.create_sample_process.create_samples(sample_names=[sample_name])
        cls.sample = samples[0]

    def test_is_setup_correctly(self):
        self.assertIsNotNone(self.project)
        self.assertIsNotNone(self.project.name)
        self.assertEqual(self.project_name, self.project.name)
        self.assertIsNotNone(self.project.id)
        self.assertEqual(self.project_id, self.project.id)
        self.assertIsNotNone(self.experiment)
        self.assertIsNotNone(self.experiment.id)
        self.assertEqual(self.experiment_id, self.experiment.id)
        self.assertIsNotNone(self.create_sample_process)
        self.assertIsNotNone(self.create_sample_process.id)
        self.assertIsNotNone(self.create_sample_process.process_type)
        self.assertEqual(self.create_sample_process.process_type, 'create')
        self.assertTrue(self.create_sample_process.does_transform)
        print ''
        print self.project_name

    def test_delete_leaf_process(self):
        processes = self.experiment.get_all_processes()
        print ''
        print processes
        l = len(processes)
        compute_process = self.experiment.create_process_from_template(Template.compute)
        self.assertIsNotNone(compute_process)
        self.assertIsNotNone(compute_process.id)
        self.assertIsNotNone(compute_process.process_type)
        self.assertEqual(compute_process.process_type, 'analysis')
        self.assertFalse(compute_process.does_transform)
        compute_process.add_input_samples_to_process([self.sample])
        processes = self.experiment.get_all_processes()
        self.assertEqual(len(processes),l+1)
        compute_process.delete()
        processes = self.experiment.get_all_processes()
        print processes
        self.assertEqual(len(processes),l)

    def test_can_not_delete_non_leaf_node(self):
        processes = self.experiment.get_all_processes()
        l = len(processes)
        compute_process = self.experiment.create_process_from_template(Template.compute)
        self.assertIsNotNone(compute_process)
        self.assertIsNotNone(compute_process.id)
        self.assertIsNotNone(compute_process.process_type)
        self.assertEqual(compute_process.process_type, 'analysis')
        self.assertFalse(compute_process.does_transform)
        compute_process.add_input_samples_to_process([self.sample])
        processes = self.experiment.get_all_processes()
        self.assertEqual(len(processes),l+1)
        self.create_sample_process.delete()
        processes = self.experiment.get_all_processes()
        self.assertEqual(len(processes),l+1)
