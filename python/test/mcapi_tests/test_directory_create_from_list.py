import unittest
from random import randint
from mcapi import set_remote_config_url, get_remote_config_url
from mcapi import create_project

url = 'http://mctest.localhost/api'


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix+number


class TestDirectoryPathCreate(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        set_remote_config_url(url)
        cls.project_name = fake_name("TestDirectoryProject-")
        description = "Test project generated by automated test"
        project = create_project(cls.project_name, description)
        cls.project = project


    def test_is_setup_correctly(self):
        self.assertEqual(get_remote_config_url(), url)
        self.assertIsNotNone(self.project)
        self.assertIsNotNone(self.project.name)
        self.assertEqual(self.project_name, self.project.name)

    def test_basic_dir_list(self):
        project = self.project
        directory_path_list = ['/a/b/c', '/a/b/e', '/a/f/g']
        print ''
        print directory_path_list
        directory_table = project.add_directory_list(directory_path_list)
        self.assertIsNotNone(directory_table)
        print directory_table
        
        # for path in directory_path_list:
        #     id = directory_id_table[path]
        #     directory = project.get_directory(id)
        #     self.assertEqual(path, directory.path)
