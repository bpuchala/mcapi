{"name":"MCAPI","tagline":"Materials Commons API","body":"# Materials Commons REST API\r\n\r\n# API Overview\r\nThis document describes the resources that make up the official Materials Commons API v2.\r\n\r\n1. [Current Version](#CurrentVersion)\r\n2. [Schema](#Schema)\r\n3. [Details Parameter](#DetailParameter)\r\n\r\n## Current Version\r\nAll requests receive the default v2 version of the API. The version of the API may change in the future. To ensure compatability you should explicitly set ```Accept``` header.\r\n\r\n```Accept: application/vnd.materialscommons.v2+json```\r\n\r\nThe default version of the API may change in the future. Setting the header will ensure you receive specific version response.\r\n\r\n## Schema\r\nAll API access is over HTTPS. The production version version of the API is available through ```materialscommons.org/api/v2```. If you are accessing the test site then the API is available through ```test.materialscommons.org/api/v2```.\r\n\r\nThe Materials Commons send and receives in JSON format.\r\n\r\n## Parameters\r\n### Details Parameter\r\nMany APIs return an object. This occurs when you request a specific object, such as a project, or you update or create one. Where the object in question has a list of dependent types, the API will return an overview of those type, rather than the details.\r\n\r\nFor example a ```Project``` contains a list of ```Samples```. When requesting a Project you can ask that the full details for the ```Samples``` be included rather than the overview defintions. This is more expensive and should be used only when you will immediately need access to this information.\r\n\r\nThe ```details``` parameter allows you to define the level of details to return. By default the API returns details at ```overview``` level. The ```details``` parameter accepts ```overview``` or ```full``` as arguments. When ```full``` is specified you will receive a complete object definition for all dependent objects.\r\n\r\n#### Examples\r\nThe following call returns project details with dependent types (samples, and processes in this example) in overview.\r\n\r\nYou can make this request in two ways. The first explicitly sets ```details=overview```\r\n```$ curl -i https://materialscommons.org/api/v2/projects?details=overview```\r\n\r\nSince ```overview``` is the default when make a request the details parameter doesn't need to be set: It will default to ```overview```, e.g.\r\n```$ curl -i https://materialscommons.org/api/v2/projects```\r\n\r\n```json\r\n{\r\n\r\n    \"_type\": \"project\" ,\r\n    \"ctime\":  531360000,\r\n    \"directory_id\": \"d3cff7f1-c958-4cb6-8fb5-8a588b6d76b5\" ,\r\n    \"description\": \"Test grain size boundaries\" ,\r\n    \"id\": \"9a07cdfd-b420-4411-883e-21526a468aee\" ,\r\n    \"mtime\":  531360000,\r\n    \"name\": \"proj5\" ,\r\n    \"owner\": proj5@mc.org, »\r\n    \"processes\": [\r\n        {\r\n            \"_type\": \"process\" ,\r\n            \"ctime\": 5313600020 ,\r\n            \"description\": \"\",\r\n            \"id\": \"74bc8ec5-efee-42f6-9f7f-98721ca16d85\" ,\r\n            \"mtime\": 5313600020 ,\r\n            \"name\": \"As Measured - 09/03/2015 @ 3:48PM\"\r\n        }\r\n    ] ,\r\n    \"samples\": [],\r\n}\r\n```\r\n\r\n```$ curl -i https://materialscommons.org/api/v2/projects?details=full```\r\n\r\n```json\r\n{\r\n\r\n    \"_type\": \"project\" ,\r\n    \"ctime\": 531360000,\r\n    \"directory_id\": \"d3cff7f1-c958-4cb6-8fb5-8a588b6d76b5\" ,\r\n    \"description\": \"\" ,\r\n    \"id\": \"9a07cdfd-b420-4411-883e-21526a468aee\" ,\r\n    \"mediatypes\": null ,\r\n    \"mtime\": 531360000 ,\r\n    \"name\": \"proj5\" ,\r\n    \"owner\": proj5@mc.org, »\r\n    \"processes\": [\r\n        {\r\n            \"_type\": \"process\" ,\r\n            \"birthtime\": 5313600020 ,\r\n            \"does_transform\": false ,\r\n            \"id\": \"74bc8ec5-efee-42f6-9f7f-98721ca16d85\" ,\r\n            \"mtime\": 5313600020 ,\r\n            \"name\": \"As Measured - 09/03/2015 @ 3:48PM\" ,\r\n            \"description\": \"\",\r\n            \"owner\": proj5@mc.org, »\r\n            \"process_type\": \"OTHER\" ,\r\n            \"what\": \"\" ,\r\n            \"why\": \"\",\r\n            \"samples\": [],\r\n            \"files\": []\r\n        }\r\n    ] ,\r\n    \"samples\": [],\r\n\r\n}\r\n```\r\n\r\n# API Call Sequence\r\n\r\n```sequence\r\nTitle: API Call Sequence\r\nClient->MC Service: Authenticate\r\nMC Service-->Client: Authentication Token\r\nClient->>MC Service: Request (containing Token)\r\nMC Service-->Client: Response\r\n```\r\n\r\n# Projects\r\n-------------------\r\n\r\nAll access to projects requires an APIKEY to authenticate the request. The APIKEY controls access to the project and its resources.\r\n\r\n## Type definitions\r\n\r\n### Overview type\r\nAll objects have an overview definition. All overview definitions have the same fields. You can identify the type of overview object by looking at its ```_type``` field.\r\n\r\n#### Overview type definition\r\n\r\n```go\r\ntype OverviewType struct {\r\n    id          string      // The ID of the object\r\n    name        string      // Name of the object\r\n    description string\r\n    ctime       integer     // Creation time of the object\r\n    mtime       integer     // Last modification time\r\n    _type       string      // Type of Object\r\n}\r\n```\r\n\r\n#### Example data\r\n\r\n```json\r\n{\r\n    \"id\": \"367416f9-c266-46cd-a224-f48f08c53b46\",\r\n    \"name\": \"My Sample\",\r\n    \"description\": \"Pure Aluminum from Ford\",\r\n    \"ctime\": 531360000,\r\n    \"mtime\": 531360000,\r\n    \"_type\": \"sample\"\r\n}\r\n```\r\n\r\n### Project type\r\n\r\n```go\r\ntype Project struct {\r\n    id              string      // Unique ID of project\r\n    name            string      // Name of project\r\n    description     string      // Project description\r\n    directory_id    string      // Top level directory id\r\n    processes       []Process   // Processes in project\r\n    samples         []Sample    // Samples in project\r\n    users           []User      // Users with permissions to access project\r\n    owner           string      // Owner of project\r\n    ctime           time.Time   // Create time\r\n    mtime           time.Time   // Last modification time\r\n    _type           string      // \"project\"\r\n}\r\n```\r\n\r\n### Process type\r\n\r\n```go\r\ntype Process struct {\r\n    id              string\r\n    ctime           integer\r\n    mtime           integer\r\n    owner           string\r\n    name            string\r\n    description     string\r\n    why             string\r\n    owner           string\r\n    directory_id    string\r\n    mediatypes      MediaType\r\n    samples_in      []Sample\r\n    samples_out     []Sample\r\n    files_in        []File\r\n    files_out       []File\r\n    measurements    []Measurement\r\n    size            integer64\r\n    _type           string\r\n}\r\n```\r\n\r\n### Sample type\r\n\r\n```go\r\ntype Sample struct {\r\n    id              string\r\n    property_set_id string\r\n    name            string\r\n    description     string\r\n    files           []File\r\n    processes       []Process\r\n    measurements    []Measurement\r\n}\r\n```\r\n\r\n### User type\r\n\r\n```go\r\ntype User struct {\r\n}\r\n```\r\n\r\n# REST API\r\n\r\n## Authenticate\r\n```POST /login```\r\nAuthenticate the system and get back an authentication token. You may supply either a username and password or an application key, application id and username. Each application must be pre authorized by the user.\r\n\r\n### Parameters\r\n|Name|Type|Description|\r\n|----|----|-----------|\r\n|```username```|string|The users login id, for example ```username:user@umich.edu```|\r\n|```password```|string|The users account password|\r\n|```application_key```|string|The system assigned application key|\r\n|```application_id```|string|The application id associated with the ```application_key```|\r\n\r\n#### Example using username and password\r\n\r\n```json\r\n{\r\n    \"username\": \"user@umich.edu\",\r\n    \"password\": \"my secure password 123\"\r\n}\r\n```\r\n\r\n#### Example using application parameters\r\n\r\n```json\r\n{\r\n    \"username\": \"user@umich.edu\",\r\n    \"application_key\": \"367416f9-c266-46cd-a224-f48f08c53bbb\",\r\n    \"application_id\": \"mc_upload_client\"\r\n}\r\n```\r\n\r\n## Projects API\r\nAll access to a project requires the authentication token received from the ```/login``` unless you are accessing a _public_ project.\r\n\r\n## List Projects \r\n```GET /projects```\r\n\r\nThe Get Projects API will return the list of all projects that a user owns or has access to.\r\n\r\n_Does not accept_ the ```details``` parameter. If you need the full details for a particular project then you should call ```GET /projects/:project_id?details=full```.\r\n\r\n### Example output\r\n```$ curl -H \"Authorization: very_long_token_string\" https://materialscommons/org/api/v2/projects```\r\n\r\n```json\r\n[{\r\n    \"_type\": \"project\" ,\r\n    \"ctime\":  531360000,\r\n    \"directory_id\": \"d3cff7f1-c958-4cb6-8fb5-8a588b6d76b5\" ,\r\n    \"description\": \"Test grain size boundaries\" ,\r\n    \"id\": \"9a07cdfd-b420-4411-883e-21526a468aee\" ,\r\n    \"mtime\":  531360000,\r\n    \"name\": \"proj1\" ,\r\n    \"owner\": user@mc.org, »\r\n    \"processes\": [\r\n        {\r\n            \"_type\": \"process\" ,\r\n            \"ctime\": 5313600020 ,\r\n            \"description\": \"\",\r\n            \"id\": \"74bc8ec5-efee-42f6-9f7f-98721ca16d85\" ,\r\n            \"mtime\": 5313600020 ,\r\n            \"name\": \"As Measured - 09/03/2015 @ 3:48PM\"\r\n        }\r\n    ] ,\r\n    \"samples\": [],\r\n    \"users\": [\"user@mc.org\"]\r\n},\r\n{\r\n    \"_type\": \"project\" ,\r\n    \"ctime\":  531360000,\r\n    \"datadir\": \"bd3ff7f1-c958-4cb6-8fb5-8a588b6d7cde\" ,\r\n    \"description\": \"Test grain size boundaries\" ,\r\n    \"id\": \"4aa7cdfd-b420-4411-883e-21526a468e4e\" ,\r\n    \"mtime\":  531360000,\r\n    \"name\": \"proj2\" ,\r\n    \"owner\": user@mc.org, »\r\n    \"processes\": [] ,\r\n    \"samples\": [],\r\n    \"users\": [\"user@mc.org\"]\r\n}]\r\n```\r\n\r\n### List Public Projects\r\n```GET /projects/public```\r\n\r\n### Get Project\r\n```GET /projects/:project_id```\r\nThe Get Project API will return the details for a given project.\r\n\r\n### Update Project\r\n```PUT /projects/:project_id```\r\n\r\nAllows you to change the name, add templates, etc...\r\n\r\n### Create Project \r\n```POST /projects```\r\n\r\nThe Create Project command will create a new project for the currently authenticated user. The project name must be unique for the user.\r\n\r\n#### Input\r\n|name|Type  |Description            |\r\n|----|------|-----------------------|\r\n|name|string|The name of the project.<br>Name must be unique for the user.|\r\n|description|string|Optional description for project.|\r\n\r\n#### Response Codes\r\n|Code         |Description             |\r\n|-------------|------------------------|\r\n|201 Created  | Project was successfully created|\r\n|400 Bad Request |The inputs were incorrect or additional|\r\n|409 Conflict | The user already has a project of the given name|\r\n\r\n#### Example\r\n```\r\n$ curl -X POST -H \"Content-Type: application/json\" \\\r\n         -d '{\"name\": \"My Project\", \"description\": \"Test WE43 Properties\"}' \\\r\n         https://materialscommons.org/api/v2/projects\r\n```\r\n##### Response\r\n```Status: 201 Created```\r\n\r\n```json\r\n{\r\n    \"_type\": \"project\" ,\r\n    \"ctime\":  531360000,\r\n    \"directory_id\": \"abdef7f1-c958-4cb6-8fb5-8a588b6d76ee\" ,\r\n    \"description\": \"Test WE43 Properties\" ,\r\n    \"id\": \"09a7cdfd-b420-4411-883e-21526a468abd\" ,\r\n    \"mtime\":  531360000,\r\n    \"name\": \"My Project\" ,\r\n    \"owner\": user@mc.org, »\r\n    \"processes\": [] ,\r\n    \"samples\": [],\r\n    \"users\": [\"user@mc.org\"]\r\n}\r\n```\r\n\r\n### List Project Samples \r\n```GET /projects/:project_id/samples```\r\n\r\n### Get Single Project Sample\r\n```GET /projects/:project_id/samples/:sample_id```\r\n\r\n### Update Project Sample \r\n```PUT /projects/:project_id/samples/:sample_id```\r\n\r\n### Create Sample in Project\r\n```POST /projects/:project_id/samples```\r\n\r\n### Delete Sample in Project\r\n```DELETE /projects/:project_id/samples/:sample_id```\r\n\r\n### List Processes in Project\r\n```GET /projects/:project_id/processes```\r\n\r\n### Create Process in Project \r\n```POST /projects/:project_id/processes```\r\n\r\n### Update Process in Project\r\n```PUT /projects/:project_id/processes/:process_id```\r\n\r\nThe Update Process in Project updates attributes of the process. This command is structured as a series of commands. Each command works on different parts of the process. The process data structure is complex and updates to the structure can involve modifying, adding or deleting attributes associated with the process.\r\n\r\n|Command|Description|\r\n|-------|-----------|\r\n|samples|Add or delete samples from the process|\r\n|files| Add or delete files from the process|\r\n|measurements|Add modify or delete measurements from the process|\r\n|attributes|Modify attributes such as name and description for the process|\r\n|setup|Add, modify or delete setup attributes of the process|\r\n\r\n#### Command Structure\r\n\r\n```json\r\n{\r\n    \"samples\": [],\r\n    \"files\": [],\r\n    \"measurements\": [],\r\n    \"attributes\": [],\r\n    \"setup\": []\r\n}\r\n```\r\n\r\n#### ```samples``` command\r\nThe ```samples``` command updates a process by adding, modifying or removing samples. The command can modify a sample in the following ways:\r\n* Remove a file association from the sample. The file must have been associated with the sample in this process.\r\n* Add a file association to the sample. The file must already be associated with the process.\r\n* Delete a file association from a sample. The file must already be associated with the process.\r\n\r\n##### Samples ```add``` command\r\n\r\n```json\r\n{\r\n    \"command\":\"add\",\r\n    \"sample_id\": \"the sample id\"\r\n}\r\n```\r\n\r\n##### Samples ```delete``` command\r\n\r\n```json\r\n{\r\n    \"command\": \"delete\",\r\n    \"sample_id\": \"the sample id\"\r\n}\r\n```\r\n\r\n##### Samples ```modify``` command\r\n\r\n```json\r\n{\r\n    \"command\": \"modify\",\r\n    \"sample_id\": \"the sample id\",\r\n    \"file_id\": \"the file id\",\r\n    \"subcommand\": \"add\"\r\n}\r\n\r\n{\r\n    \"command\": \"modify\",\r\n    \"sample_id\": \"the sample id\",\r\n    \"file_id\": \"the file id\",\r\n    \"arg\": \"delete\"\r\n}\r\n\r\n{\r\n    \"command\": \"modify\",\r\n    \"sample_id\": \"the sample id\",\r\n    \"measurement_id\": \"the measurement id\",\r\n    \"arg\": \"delete\"\r\n}\r\n\r\n{\r\n    \"command\": \"modify\",\r\n    \"sample_id\": \"the sample id\",\r\n    \"measurement_id\": \"the measurement id\",\r\n    \"arg\": \"modify\",\r\n    \"measurement\": {}\r\n}\r\n\r\n{\r\n    \"command\": \"modify\",\r\n    \"sample_id\": \"the sample id\",\r\n    \"arg\": \"add\",\r\n    \"measurement\": {}\r\n}\r\n```\r\n\r\n#### ```files``` command\r\n\r\n#### Files ```add``` command\r\n\r\n```json\r\n{\r\n    \"command\": \"add\",\r\n    \"file_id\": \"file id\",\r\n    \"direction\": \"in or out\"\r\n}\r\n```\r\n\r\n#### Files ```delete``` command\r\n\r\n```json\r\n{\r\n    \"command\": \"delete\",\r\n    \"file_id\": \"file id\"\r\n}\r\n```\r\n\r\n#### ```measurements``` command\r\n\r\n#### ```attributes``` command\r\n\r\n#### ````setup```` command\r\n\r\n### Delete Process in Project\r\n```DELETE /projects/:project_id/processes/:process_id```\r\n\r\n### Get Project File\r\n```GET /projects/:project_id/files/:file_id```\r\nGet Project File retrieves a file\r\n\r\n### Get Project Files\r\n```POST /projects/:project_id/files```\r\nThis command takes a list of file ids and returns the details for those files\r\n\r\nIt's parameter looks as follows:\r\n```\r\n{\r\n    file_ids:[]\r\n}\r\n```\r\n\r\nWhere ```file_ids``` is a list of file ids belonging to the project.\r\n\r\n### Update Project File\r\n```PUT /projects/:project_id/files/:file_id```\r\n\r\nThe Update Project File API updates attributes associated with the a file.\r\n\r\n|Command|Description|\r\n|-------|-----------|\r\n|name|Change the name of the file|\r\n|directory|Change the directory the file is located in|\r\n|notes|Add, modify or delete a file note|\r\n|tags|Add or delete file tags|\r\n|description|Modify the file description|\r\n\r\n#### Command structure\r\n\r\n```json\r\n{\r\n    \"name\": \"file name\",\r\n    \"directory\": \"new directory id\",\r\n    \"notes\":[],\r\n    \"tags\": [],\r\n    \"description\": \"the file description\",\r\n    \"processes\": [],\r\n    \"samples\": []\r\n}\r\n```\r\n\r\n#### ```notes``` command\r\nThe ```notes``` command takes a list of notes and updates the file to include the new set of notes. To delete a note you need to include the note with its note id and add the field ```\"delete\":true```. This note entry will look as follows:\r\n```\r\n{\r\n    \"id\": \"the note id\",\r\n    \"delete\": true\r\n}\r\n```\r\n\r\nTo add a new note simply include a note without an id field. This will then be added as a new note to the file.\r\n\r\n#### ```tags``` commands\r\nThe ```tags``` command takes a list of tags. The server then determines how that tags list has changed and updates the file with the new list of tags.\r\n\r\n#### ```processes``` commands\r\n\r\n```json\r\n{\r\n    \"command\": \"add\",\r\n    \"process_id\": \"process id\",\r\n    \"direction\": \"in or out\"\r\n}\r\n\r\n{\r\n    \"command\": \"delete\",\r\n    \"process_id\": \"process id\"\r\n}\r\n```\r\n\r\n#### ```samples``` commands\r\n\r\n### Delete Project File\r\n```DELETE /projects/:project_id/files/:file_id```\r\n\r\n### Create Project Directory\r\n```POST /projects/:project_id/directories```\r\n\r\n### Update Project Directory\r\n```PUT /projects/:project_id/directories/:directory_id```\r\n\r\n### Delete Project Directory\r\n```DELETE /projects/:project_id/directories/:directory_id```\r\n\r\n### List Project Directory\r\n```GET /projects/:project_id/directories/:directory_id```\r\nThis call retrieves the directory identified by ```:directory_id```\r\n\r\n### List Top level Project Directory\r\n```GET /projects/:/project_id/directories```\r\nThis call retrieves the top level directory associated with a project.\r\n\r\n### Search All of User's Projects \r\n```POST /projects/search```\r\n\r\n### Search Project\r\n```POST /projects/:project_id/search```\r\n\r\n### Search Public Projects\r\n```POST /projects/public/search```\r\n\r\n#### Upload File\r\n```POST /projects/:project_id/uploads```\r\nUpload a whole file\r\n\r\n```POST /projects/:project_id/uploads/chunk```\r\nUpload file chunk by chunk","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}